✅ 1. 🔁 Check SSH Between Host and Guest (Optional)

Since you’ve installed OpenSSH on both, let’s confirm that Ubuntu (Ansible node) can SSH into the Windows Host OR any managed machine.

    Normally, Ansible is used to control remote Linux servers, so if you're experimenting with Ubuntu controlling another Ubuntu, that's easier than controlling a Windows host.

Run this on your Ubuntu VM:

ssh username@target_ip_address

If SSH works without password, you're good. If not, you can:

ssh-keygen   # Press Enter for defaults
ssh-copy-id username@target_ip

✅ 2. 📂 Create Ansible Inventory File (hosts)
📍Location

You can either use the default /etc/ansible/hosts file OR create your own in any directory.

We’ll use a custom file for clarity.
▶️ Create It Using vim

vim inventory

✍️ Sample Content (assuming you're controlling localhost or another Ubuntu VM)

[webservers]
192.168.1.101 ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa

[local]
localhost ansible_connection=local

✅ Save and exit:

    Press Esc, then type :wq → Enter

✅ 3. ✍️ Create a Simple Ansible Playbook

Let’s create a YAML file to install Nginx or create a simple file.

vim nginx_setup.yml

▶️ Sample Playbook:

---
- name: Install Nginx on Web Servers
  hosts: webservers
  become: yes

  tasks:
    - name: Update APT cache
      apt:
        update_cache: yes

    - name: Install Nginx
      apt:
        name: nginx
        state: present

✅ Save: Esc -> :wq
✅ 4. ▶️ Run the Playbook

ansible-playbook -i inventory nginx_setup.yml

This will:

    Use your custom inventory file

    Connect to the host(s) defined under [webservers]

    Install Nginx using apt

🧪 Test If It Worked

SSH into the remote machine:

ssh ubuntu@192.168.1.101

Check:

systemctl status nginx

You should see Nginx is running.
⚙️ Extras You Can Try
✅ Check Ping:

ansible all -i inventory -m ping

✅ Create a file on remote server:

- name: Create file on server
  hosts: webservers
  become: yes
  tasks:
    - name: Create hello.txt
      file:
        path: /home/ubuntu/hello.txt
        state: touch

🛠️ Summary Checklist
Step	Description	Command
✅ 1	Generate SSH key	ssh-keygen
✅ 2	Copy key to host	ssh-copy-id user@ip
✅ 3	Create inventory file	vim inventory
✅ 4	Write playbook YAML	vim playbook.yml
✅ 5	Run playbook	ansible-playbook -i inventory playbook.yml
✅ 6	Test	ansible all -i inventory -m ping

If you're using localhost for practice, just set the inventory like:

[local]
localhost ansible_connection=local

Let me know:

    Do you want a playbook to configure multiple packages (e.g., MySQL, Git)?

    Do you want me to help with using roles and handlers?

Happy to guide you further!
You said:
 thought for vim files of inventory, we use inventory.ini right??
ChatGPT said:

You're absolutely right! 🙌

Yes, when creating an inventory file for Ansible using vim, it's a great idea to name it inventory.ini, especially when you want to keep your files organized and clear.
✅ So instead of:

vim inventory

You can (and should) do:

vim inventory.ini

Then add your host definitions like this:

[webservers]
192.168.1.101 ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa

[local]
localhost ansible_connection=local

✅ When running the playbook:

Make sure to point to the correct file name:

ansible-playbook -i inventory.ini nginx_setup.yml

💡 Tip: The file can technically be named anything, like hosts, myinventory, or dev.ini — as long as you specify the name using the -i flag when running the playbook.
